# -*- coding: utf-8 -*-
"""task-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ana1wEhqtn_GW-CX3Yqw7PlKUlx0meT5
"""

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns
import matplotlib.pyplot as plt
# 1. Create Synthetic Sales Dataset
np.random.seed(42)

months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun"]
categories = ["Groceries", "Clothing", "Electronics", "Home Essentials"]
payment_methods = ["Cash", "Credit Card", "UPI/Wallet"]

n = 5000
data = {
    "Transaction_ID": range(1, n+1),
    "Customer_ID": np.random.randint(1000, 1200, n),
    "Month": np.random.choice(months, n),
    "Category": np.random.choice(categories, n, p=[0.35, 0.25, 0.20, 0.20]),
    "Payment": np.random.choice(payment_methods, n, p=[0.25, 0.30, 0.45]),
    "Units": np.random.randint(1, 6, n),
    "Price_per_unit": np.random.randint(20, 1000, n)
}

df = pd.DataFrame(data)
df["Revenue"] = df["Units"] * df["Price_per_unit"]
df["Profit"] = df["Revenue"] * np.random.uniform(0.2, 0.4, n)

# -------------------------------
# 2. KPIs
# -------------------------------
total_revenue = df["Revenue"].sum()
total_profit = df["Profit"].sum()
total_transactions = len(df)
avg_order_value = df["Revenue"].mean()
unique_customers = df["Customer_ID"].nunique()
repeat_ratio = 1 - (unique_customers / len(df))

print("===== KPI DASHBOARD =====")
print(f"Total Revenue: ${total_revenue:,.0f}")
print(f"Total Profit: ${total_profit:,.0f}")
print(f"Average Order Value: ${avg_order_value:.2f}")
print(f"Unique Customers: {unique_customers}")
print(f"Repeat Customer Ratio: {repeat_ratio:.2%}")

# -------------------------------
# 3. Interactive Dashboards with Plotly
# -------------------------------

# Revenue by Category
fig1 = px.bar(df.groupby("Category", as_index=False)["Revenue"].sum(),
              x="Category", y="Revenue", color="Category",
              title="Revenue by Category")
fig1.show()

# Monthly Revenue Trend
fig2 = px.line(df.groupby("Month", as_index=False)["Revenue"].sum(),
               x="Month", y="Revenue", markers=True,
               title="Monthly Revenue Trend")
fig2.show()

# Payment Method Distribution
fig3 = px.pie(df, names="Payment", title="Payment Method Share",
              values="Revenue", hole=0.3)
fig3.show()

# Customer Pareto Chart
customer_revenue = df.groupby("Customer_ID")["Revenue"].sum().sort_values(ascending=False)
customer_cumshare = customer_revenue.cumsum() / customer_revenue.sum()
pareto_df = pd.DataFrame({"Customer": customer_revenue.index,
                          "Revenue": customer_revenue.values,
                          "CumShare": customer_cumshare.values})

fig4 = go.Figure()
fig4.add_trace(go.Bar(x=pareto_df["Customer"][:50], y=pareto_df["Revenue"][:50],
                      name="Revenue"))
fig4.add_trace(go.Scatter(x=pareto_df["Customer"][:50], y=pareto_df["CumShare"][:50],
                          mode="lines+markers", name="Cumulative Share",
                          yaxis="y2"))

fig4.update_layout(
    title="Pareto Analysis (Top Customers)",
    yaxis=dict(title="Revenue"),
    yaxis2=dict(title="Cumulative Share", overlaying="y", side="right")
)
fig4.show()

# -------------------------------
# 4. Heatmap with Seaborn
# -------------------------------
heatmap_data = df.pivot_table(index="Month", columns="Category", values="Revenue", aggfunc="sum")

plt.figure(figsize=(8,6))
sns.heatmap(heatmap_data, annot=True, fmt=".0f", cmap="Blues")
plt.title("Monthly Revenue by Category (Heatmap)")
plt.show()